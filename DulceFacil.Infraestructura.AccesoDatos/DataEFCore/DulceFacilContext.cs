// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DulceFacil.Infraestructura.AccesoDatos;

public partial class DulceFacilContext : DbContext
{
    public DulceFacilContext()
    {
    }

    public DulceFacilContext(DbContextOptions<DulceFacilContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CLIENTE> CLIENTE { get; set; }

    public virtual DbSet<COTIZACION> COTIZACION { get; set; }

    public virtual DbSet<COTIZACION_DETALLE> COTIZACION_DETALLE { get; set; }

    public virtual DbSet<INVENTARIO> INVENTARIO { get; set; }

    public virtual DbSet<PRECIOPRODUCTO> PRECIOPRODUCTO { get; set; }

    public virtual DbSet<PRODUCTO> PRODUCTO { get; set; }

    public virtual DbSet<REPARTIDOR> REPARTIDOR { get; set; }

    public virtual DbSet<RUTA> RUTA { get; set; }

    public virtual DbSet<UBICACION_ENTREGA> UBICACION_ENTREGA { get; set; }

    public virtual DbSet<USUARIO> USUARIO { get; set; }

    public virtual DbSet<VENTA> VENTA { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-NAQ8ASG\\SQLEXPRESS;Initial Catalog=DulceFacil;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CLIENTE>(entity =>
        {
            entity.HasKey(e => e.IDENTIFICACION).IsClustered(false);

            entity.Property(e => e.IDENTIFICACION)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.APELLIDO)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DIRECCION).HasColumnType("text");
            entity.Property(e => e.EMAIL)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NOMBRE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TELEFONO)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<COTIZACION>(entity =>
        {
            entity.HasKey(e => e.COTZID).IsClustered(false);

            entity.HasIndex(e => e.IDENTIFICACION, "RELATIONSHIP_1_FK");

            entity.Property(e => e.COTZID).ValueGeneratedNever();
            entity.Property(e => e.ESTADO)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FECHA).HasColumnType("datetime");
            entity.Property(e => e.IDENTIFICACION)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IDENTIFICACIONNavigation).WithMany(p => p.COTIZACION)
                .HasForeignKey(d => d.IDENTIFICACION)
                .HasConstraintName("FK_COTIZACI_RELATIONS_CLIENTE");
        });

        modelBuilder.Entity<COTIZACION_DETALLE>(entity =>
        {
            entity.HasKey(e => e.CODETALLEID).IsClustered(false);

            entity.HasIndex(e => e.COTZID, "RELATIONSHIP_2_FK");

            entity.HasIndex(e => e.PRODUCTID, "RELATIONSHIP_3_FK");

            entity.HasIndex(e => e.VENTAID, "RELATIONSHIP_4_FK");

            entity.Property(e => e.CODETALLEID).ValueGeneratedNever();
            entity.Property(e => e.PRECIO).HasColumnType("decimal(8, 2)");

            entity.HasOne(d => d.COTZ).WithMany(p => p.COTIZACION_DETALLE)
                .HasForeignKey(d => d.COTZID)
                .HasConstraintName("FK_COTIZACI_RELATIONS_COTIZACI");

            entity.HasOne(d => d.PRODUCT).WithMany(p => p.COTIZACION_DETALLE)
                .HasForeignKey(d => d.PRODUCTID)
                .HasConstraintName("FK_COTIZACI_RELATIONS_INVENTAR");

            entity.HasOne(d => d.VENTA).WithMany(p => p.COTIZACION_DETALLE)
                .HasForeignKey(d => d.VENTAID)
                .HasConstraintName("FK_COTIZACI_RELATIONS_VENTA");
        });

        modelBuilder.Entity<INVENTARIO>(entity =>
        {
            entity.HasKey(e => e.PRODUCTID).IsClustered(false);

            entity.Property(e => e.PRODUCTID).ValueGeneratedNever();
            entity.Property(e => e.UBICACION)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PRECIOPRODUCTO>(entity =>
        {
            entity.HasKey(e => e.PRECIOID).IsClustered(false);

            entity.HasIndex(e => e.PRODUCTID, "RELATIONSHIP_8_FK");

            entity.Property(e => e.PRECIOID).ValueGeneratedNever();
            entity.Property(e => e.FECHAFIN).HasColumnType("datetime");
            entity.Property(e => e.FECHAINICIO).HasColumnType("datetime");
            entity.Property(e => e.PRECIO).HasColumnType("decimal(8, 2)");

            entity.HasOne(d => d.PRODUCT).WithMany(p => p.PRECIOPRODUCTO)
                .HasForeignKey(d => d.PRODUCTID)
                .HasConstraintName("FK_PRECIOPR_RELATIONS_PRODUCTO");
        });

        modelBuilder.Entity<PRODUCTO>(entity =>
        {
            entity.HasKey(e => e.PRODUCTID).IsClustered(false);

            entity.Property(e => e.PRODUCTID).ValueGeneratedNever();
            entity.Property(e => e.DESCRIPCION).HasColumnType("text");
            entity.Property(e => e.NOMBRE)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.SKU)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UNIDAMEDIDA)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.PRODUCT).WithOne(p => p.PRODUCTO)
                .HasForeignKey<PRODUCTO>(d => d.PRODUCTID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_RELATIONS_INVENTAR");
        });

        modelBuilder.Entity<REPARTIDOR>(entity =>
        {
            entity.HasKey(e => e.REPARID).IsClustered(false);

            entity.Property(e => e.REPARID).ValueGeneratedNever();
            entity.Property(e => e.APELLIDO)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ESTADO)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.NOMBRE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RUTA>(entity =>
        {
            entity.HasKey(e => e.RUTAID).IsClustered(false);

            entity.HasIndex(e => e.REPARID, "RELATIONSHIP_6_FK");

            entity.Property(e => e.RUTAID).ValueGeneratedNever();
            entity.Property(e => e.ESTADO)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FECHASADICION).HasColumnType("datetime");
            entity.Property(e => e.NOMBRERUTA)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.REPAR).WithMany(p => p.RUTA)
                .HasForeignKey(d => d.REPARID)
                .HasConstraintName("FK_RUTA_RELATIONS_REPARTID");
        });

        modelBuilder.Entity<UBICACION_ENTREGA>(entity =>
        {
            entity.HasKey(e => e.UBIID).IsClustered(false);

            entity.HasIndex(e => e.RUTAID, "RELATIONSHIP_7_FK");

            entity.Property(e => e.UBIID).ValueGeneratedNever();
            entity.Property(e => e.DIRECCION).HasColumnType("text");
            entity.Property(e => e.ESTADO)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LATITUD).HasColumnType("decimal(10, 6)");
            entity.Property(e => e.LONGITUD).HasColumnType("decimal(10, 6)");

            entity.HasOne(d => d.RUTA).WithMany(p => p.UBICACION_ENTREGA)
                .HasForeignKey(d => d.RUTAID)
                .HasConstraintName("FK_UBICACIO_RELATIONS_RUTA");
        });

        modelBuilder.Entity<USUARIO>(entity =>
        {
            entity.HasKey(e => e.USERID).IsClustered(false);

            entity.Property(e => e.USERID).ValueGeneratedNever();
            entity.Property(e => e.APELLIDO)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ATTRIBUTE_8)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EMAIL)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NOMBRE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PASSWORD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ROL)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VENTA>(entity =>
        {
            entity.HasKey(e => e.VENTAID).IsClustered(false);

            entity.HasIndex(e => e.REPARID, "RELATIONSHIP_5_FK");

            entity.Property(e => e.VENTAID).ValueGeneratedNever();
            entity.Property(e => e.FECHA).HasColumnType("datetime");
            entity.Property(e => e.TOTAL).HasColumnType("decimal(8, 2)");

            entity.HasOne(d => d.REPAR).WithMany(p => p.VENTA)
                .HasForeignKey(d => d.REPARID)
                .HasConstraintName("FK_VENTA_RELATIONS_REPARTID");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}